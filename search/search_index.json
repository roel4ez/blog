{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to my blog! This is a collection of articles on a variety of topics, mostly technology, tools and hacks. {{ blog_content }}","title":"Home"},{"location":"#welcome","text":"Welcome to my blog! This is a collection of articles on a variety of topics, mostly technology, tools and hacks. {{ blog_content }}","title":"Welcome"},{"location":"tags/","text":"{{ tag_content }}","title":"Tags"},{"location":"articles/github-action-turn-on-off-vm/","text":"Background In one of the projects I'm involved in, there was the need to let a GitHub Action automatically turn on or off an Azure VM in the pipeline. The VM is required for running the full end-to-end test suite, but we don't want to have it running the whole time since it incurs a considerate costs if it is just idling away. Solution To enable this functionality, I created a reusable GitHub Action that can be integrated in any other pipeline: Power ON/OFF or DEALLOCATE a specific Azure VM It is very easy to use, just add step to any job in your Action: steps : - name : Power Azure VM uses : roel4ez/action-power-on-off-azure-vm@v1.0.1 with : AZURE_VM_NAME : <VM_NAME> AZURE_RG_NAME : <RESOURCE_GROUP_NAME> POWER_SWITCH : <ON/OFFDEALLOCATE> AZURE_SP_CLIENTID : ${{ secrets.AZURE_SP_CLIENTID }} AZURE_SP_SECRET : ${{ secrets.AZURE_SP_SECRET }} AZURE_TENANTID : ${{ secrets.AZURE_TENANTID }} For more info, refer to the README or have a look at the code yourself. Let me know what you think!","title":"Github Action for managing Azure VM"},{"location":"articles/github-action-turn-on-off-vm/#background","text":"In one of the projects I'm involved in, there was the need to let a GitHub Action automatically turn on or off an Azure VM in the pipeline. The VM is required for running the full end-to-end test suite, but we don't want to have it running the whole time since it incurs a considerate costs if it is just idling away.","title":"Background"},{"location":"articles/github-action-turn-on-off-vm/#solution","text":"To enable this functionality, I created a reusable GitHub Action that can be integrated in any other pipeline: Power ON/OFF or DEALLOCATE a specific Azure VM It is very easy to use, just add step to any job in your Action: steps : - name : Power Azure VM uses : roel4ez/action-power-on-off-azure-vm@v1.0.1 with : AZURE_VM_NAME : <VM_NAME> AZURE_RG_NAME : <RESOURCE_GROUP_NAME> POWER_SWITCH : <ON/OFFDEALLOCATE> AZURE_SP_CLIENTID : ${{ secrets.AZURE_SP_CLIENTID }} AZURE_SP_SECRET : ${{ secrets.AZURE_SP_SECRET }} AZURE_TENANTID : ${{ secrets.AZURE_TENANTID }} For more info, refer to the README or have a look at the code yourself. Let me know what you think!","title":"Solution"},{"location":"articles/mkdocs-mike-ghpages/","text":"Documentation. Developers either love it or hate it. Love it when it is available when they are trying to use the latest and greatest framework (guilty!), or hate it when they have to write it themselves. Luckily there are some really nice tools out there to manage the documentation for your projects. DocFX is one of them, this is the engine that is running the docs.microsoft.com sites. However, this article is about mkdocs . This is a neat little tool that can help you create a static site for your documentation. And it integrates nicely with GitHub Pages. Let's have a look at how to set up documentation with mkdocs and mkdocs-material. Later we'll have a look at using mike to manage versions. Requirements First of all you'll need Python on your machine, because this is what powers the whole thing. So go ahead and install that and also install pip while you are at it. Once you have this, you can install the prerequisites: - pip install mkdocs - pip install mkdocs-material - pip install mike There will be a couple of other extensions and plugins that you can use, and it probably makes sense to manage that in a requirements.txt file. Branching Let's say you have a main branch where all your code lives. You might be inclined to create a /docs folder there and start dumping your md files there. However, I recommend to keep your docs in a separate repository, so it can be maintained and managed individually (e.g. permissions). You do not need to setup a new GitHub repository for that, you can instead create a detached branch or orphan branch , called docs/main for example: git checkout docs/main --orphan If you want to have dev branch and docs branch side by side, try out git worktree git worktree git checkout docs/main # from the working folder: git worktree add c:/path-to-sources/repository.docs docs/main Get started For theming the documentation, I'm using mkdocs-material . They have a pretty good guide on how to get started , so I won't repeat all of that here. Instead, we'll skip to building and deploying Working locally For local development, use the docker-container provided by mkdocs-material . Run docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material in the root directory of the docs to get a copy running on http://localhost:8000 . You can change the port in the docker run command if needed. !!! warning \"Required extensions\" We are using extensions which are not supported by the mkdocs-material container out-of-the-box. There are two ways to deal with this: 1. use the [manual approach](#alternate-approach) 2. Create a [custom docker image](https://squidfunk.github.io/mkdocs-material/getting-started/#with-docker) with the plugin installed: ```dockerfile title=\"Dockerfile\" FROM squidfunk/mkdocs-material RUN pip install mdx_truly_sane_lists ``` ```bash title=\"Build and run container\" # in the directory where your dockerfile is docker build . -t mkdocs-material-with-extensions docker run --rm -it -p 8000:8000 -v ${PWD}:/docs mkdocs-material-with-extensions ``` Alternate approach Install Python and pip, and then the required packages: pip install -r requirements.txt mkdocs serve Configuration The file mkdocs.yml provides the main configuration for the website, such as color and themes, plugins and extension. The Table of Contents is also defined in the config file, under the section nav . This is where you can build the structure of your documentation page. Automate it! GitHub has two cool features we can leverage for our documentation: GitHub Actions: this let's us automate all the things GitHub Pages: a place to host a static site, hosted at http://<owner>.github.io/<repo> So let's do this: once you have something working locally, you can create a GitHub Action to do all the work for your. Luckily, mkdocs comes with a feature to help us out: mkdocs gh-deploy . This means the action would look something like this: name: deploy on: push: branches: - docs/main # deploy on pushes to your documentation branch jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: fetch-depth: 0 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install -r requirements.txt - run: mkdocs gh-deploy --force This is also the exact same action that powers the deployment of this blog! Versioning If you want to take things a bit further and provide versioning in your documentation, checkout the tool mike . This tool allows you to deploy multiple versions of your documentation. It sits nicely on top of mkdocs and integrates with everything that was discussed here. It also integrates nicely with GitHub Pages, which is very cool. Conclusion Besides what is mentioned here, there are of course also other tools that can achieve the same things, for example Jekyll . Choose what works for you. To see all of this in action, checkout the repository where I have set all of this up: iotedge-lorawan-starterkit . That is a very cool thing in itself, but a topic for another time! Feel free to take a look at the Actions we use there, and at the resulting documentation , including versioning.","title":"Awesome documentation with mkdocs and GitHub Pages"},{"location":"articles/mkdocs-mike-ghpages/#requirements","text":"First of all you'll need Python on your machine, because this is what powers the whole thing. So go ahead and install that and also install pip while you are at it. Once you have this, you can install the prerequisites: - pip install mkdocs - pip install mkdocs-material - pip install mike There will be a couple of other extensions and plugins that you can use, and it probably makes sense to manage that in a requirements.txt file.","title":"Requirements"},{"location":"articles/mkdocs-mike-ghpages/#branching","text":"Let's say you have a main branch where all your code lives. You might be inclined to create a /docs folder there and start dumping your md files there. However, I recommend to keep your docs in a separate repository, so it can be maintained and managed individually (e.g. permissions). You do not need to setup a new GitHub repository for that, you can instead create a detached branch or orphan branch , called docs/main for example: git checkout docs/main --orphan If you want to have dev branch and docs branch side by side, try out git worktree git worktree git checkout docs/main # from the working folder: git worktree add c:/path-to-sources/repository.docs docs/main","title":"Branching"},{"location":"articles/mkdocs-mike-ghpages/#get-started","text":"For theming the documentation, I'm using mkdocs-material . They have a pretty good guide on how to get started , so I won't repeat all of that here. Instead, we'll skip to building and deploying","title":"Get started"},{"location":"articles/mkdocs-mike-ghpages/#working-locally","text":"For local development, use the docker-container provided by mkdocs-material . Run docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material in the root directory of the docs to get a copy running on http://localhost:8000 . You can change the port in the docker run command if needed. !!! warning \"Required extensions\" We are using extensions which are not supported by the mkdocs-material container out-of-the-box. There are two ways to deal with this: 1. use the [manual approach](#alternate-approach) 2. Create a [custom docker image](https://squidfunk.github.io/mkdocs-material/getting-started/#with-docker) with the plugin installed: ```dockerfile title=\"Dockerfile\" FROM squidfunk/mkdocs-material RUN pip install mdx_truly_sane_lists ``` ```bash title=\"Build and run container\" # in the directory where your dockerfile is docker build . -t mkdocs-material-with-extensions docker run --rm -it -p 8000:8000 -v ${PWD}:/docs mkdocs-material-with-extensions ```","title":"Working locally"},{"location":"articles/mkdocs-mike-ghpages/#alternate-approach","text":"Install Python and pip, and then the required packages: pip install -r requirements.txt mkdocs serve","title":"Alternate approach"},{"location":"articles/mkdocs-mike-ghpages/#configuration","text":"The file mkdocs.yml provides the main configuration for the website, such as color and themes, plugins and extension. The Table of Contents is also defined in the config file, under the section nav . This is where you can build the structure of your documentation page.","title":"Configuration"},{"location":"articles/mkdocs-mike-ghpages/#automate-it","text":"GitHub has two cool features we can leverage for our documentation: GitHub Actions: this let's us automate all the things GitHub Pages: a place to host a static site, hosted at http://<owner>.github.io/<repo> So let's do this: once you have something working locally, you can create a GitHub Action to do all the work for your. Luckily, mkdocs comes with a feature to help us out: mkdocs gh-deploy . This means the action would look something like this: name: deploy on: push: branches: - docs/main # deploy on pushes to your documentation branch jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: fetch-depth: 0 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install -r requirements.txt - run: mkdocs gh-deploy --force This is also the exact same action that powers the deployment of this blog!","title":"Automate it!"},{"location":"articles/mkdocs-mike-ghpages/#versioning","text":"If you want to take things a bit further and provide versioning in your documentation, checkout the tool mike . This tool allows you to deploy multiple versions of your documentation. It sits nicely on top of mkdocs and integrates with everything that was discussed here. It also integrates nicely with GitHub Pages, which is very cool.","title":"Versioning"},{"location":"articles/mkdocs-mike-ghpages/#conclusion","text":"Besides what is mentioned here, there are of course also other tools that can achieve the same things, for example Jekyll . Choose what works for you. To see all of this in action, checkout the repository where I have set all of this up: iotedge-lorawan-starterkit . That is a very cool thing in itself, but a topic for another time! Feel free to take a look at the Actions we use there, and at the resulting documentation , including versioning.","title":"Conclusion"}]}